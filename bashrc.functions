#------------------------------------------------------------------------------
# general functions
#------------------------------------------------------------------------------
vman() {
  vim -c "SuperMan $*"
  if [ "$?" != "0" ]; then
    echo "No manual entry for $*"
  fi
}

hidden() {
  ls -AF "$@" |  grep '^\.';
}

A () {
  ack --cc "$1" source src system 2>/dev/null
}

# Simple recursive grep function that ignores .svn|.git directories
# Usage: f "pattern" [dir_to_search]
#        default dir_to_search is current dir (the ./ dir)
f () {
  local pattern="$1";
  local dir=${2:-.};
  find ${dir} -type d \( -name .svn -o -name .git -o -name output \) -prune -false \
    -o -type f -print0 | xargs -0 grep -H -I "${pattern}" ;
}

F () {  # case insensitive version
  local pattern="$1";
  local dir=${2:-.};
  find ${dir} -type d \( -name .svn -o -name .git -o -name output \) -prune -false \
    -o -type f -print0 | xargs -0 grep -H -I -i "${pattern}" ;
}

#----------------------------------------
# Simple find of a file that matches the supplied name exactly
# Usage: ff "pattern" [dir_to_search]
#        default dir_to_search is current dir (the ./ dir)
ff () {
  local pattern="$1";
  local dir=${2:-.};
  find ${dir} -type d \( -name .svn -o -name .git \) -prune -false \
    -o -type f -name "${pattern}" -print
}

FF () {  # approx match version
  local pattern="$1";
  local dir=${2:-.};
  find ${dir} -type d \( -name .svn -o -name .git \) -prune -false \
    -o -type f -name "*${pattern}*" -print
}

More () {
  local pattern="$1";
  local dir=${2:-.};
  local filepath=`find ${dir} -type d \( -name .svn -o -name .git \) -prune -false \
    -o -type f -name "${pattern}" -print`
  if [ -z $filepath ] ; then
    echo "$pattern not found"
  else
    less $filepath
  fi
}

#----------------------------------------
# Function that reports usage in MB of a given subdir (1 level deep), in ascending order
# Usage: ddu [local_dir_or_file]
#        default local_dir_or_file is current dir (the ./ dir)
ddu () {
  local dir=${1:-.};
  echo "MBytes   Dir"
  echo "-------------------------"
  find ${dir} -maxdepth 1 -type d -exec du -s -m {} \; | sort -n -r ;
}

#----------------------------------------
# Function to change all files/dirs in a subdir to be owned by me
# Usage: mine [local_dir_or_file]
#        default local_dir_or_file is current dir (the ./ dir)
mine () {
  local dir=${1:-.};
  find ${dir} \( -type d -name .git \) -prune -false -o -exec chown $USER {} \;
}

#----------------------------------------
# Function to list all files in a directory, minus the hidden svn/git ones
L () {
  local dir=${1:-.};
  find ${dir} -type d \( -name .svn -o -name .git \) -prune -false -o -type f
}

#----------------------------------------
# Function to show how a command will be executed
how () {
  if [ $# -ne 0 ] ; then
    more `type -P $1`
  fi
}

#------------------------------------------------------------------------------
# git functions
#------------------------------------------------------------------------------
git_rev() {
  local d=`date +%Y%m%d`
  local c=`git rev-list --count HEAD | xargs -n1 printf %04d`
  local h=`git rev-list --abbrev-commit HEAD | head -1`
  echo ${c}:${h}:${d}
}

# Aliases for git
alias add="git add"
alias dff="git df"
alias st="git st"

#------------------------------------------------------------------------------
# setup python env
#------------------------------------------------------------------------------
#export PATH="/Users/mbianchi/.pyenv/shims:${PATH}"
#export PYENV_SHELL=bash
#source '/usr/local/Cellar/pyenv/20151105/libexec/../completions/pyenv.bash'
#pyenv rehash 2>/dev/null
#pyenv() {
#  local command
#  command="$1"
#  if [ "$#" -gt 0 ]; then
#    shift
#  fi
#
#  case "$command" in
#  rehash|shell)
#    eval "`pyenv "sh-$command" "$@"`";;
#  *)
#    command pyenv "$command" "$@";;
#  esac
#}

