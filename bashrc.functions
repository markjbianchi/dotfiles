#------------------------------------------------------------------------------
# general functions
#------------------------------------------------------------------------------
vman() {
  vim -c "SuperMan $*"
  if [ "$?" != "0" ]; then
    echo "No manual entry for $*"
  fi
}

hidden() {
  ls -AF "$@" |  grep '^\.';
}

A () {
  ack --cc "$1" source src system 2>/dev/null
}

# Simple recursive grep function that ignores .svn|.git directories
# Usage: f "pattern" [dir_to_search]
#        default dir_to_search is current dir (the ./ dir)
f () {
  local pattern="$1";
  local dir=${2:-.};
  find ${dir} -type d \( -name .svn -o -name .git -o -name output \) -prune -false \
    -o -type f -print0 | xargs -0 grep -H -I "${pattern}" ;
}

F () {  # case insensitive version
  local pattern="$1";
  local dir=${2:-.};
  find ${dir} -type d \( -name .svn -o -name .git -o -name output \) -prune -false \
    -o -type f -print0 | xargs -0 grep -H -I -i "${pattern}" ;
}

#----------------------------------------
# Simple find of a file that matches the supplied name exactly
# Usage: ff "pattern" [dir_to_search]
#        default dir_to_search is current dir (the ./ dir)
ff () {
  local pattern="$1";
  local dir=${2:-.};
  find ${dir} -type d \( -name .svn -o -name .git \) -prune -false \
    -o -type f -name "${pattern}" -print
}

FF () {  # approx match version
  local pattern="$1";
  local dir=${2:-.};
  find ${dir} -type d \( -name .svn -o -name .git \) -prune -false \
    -o -type f -name "*${pattern}*" -print
}

More () {
  local pattern="$1";
  local dir=${2:-.};
  local filepath=`find ${dir} -type d \( -name .svn -o -name .git \) -prune -false \
    -o -type f -name "${pattern}" -print`
  if [ -z $filepath ] ; then
    echo "$pattern not found"
  else
    less $filepath
  fi
}

#----------------------------------------
# Function that reports usage in MB of a given subdir (1 level deep), in ascending order
# Usage: ddu [local_dir_or_file]
#        default local_dir_or_file is current dir (the ./ dir)
ddu () {
  local dir=${1:-.};
  echo "MBytes   Dir"
  echo "-------------------------"
  find ${dir} -maxdepth 1 -type d -exec du -s -m {} \; | sort -n -r ;
}

#----------------------------------------
# Function to change all files/dirs in a subdir to be owned by me
# Usage: mine [local_dir_or_file]
#        default local_dir_or_file is current dir (the ./ dir)
mine () {
  local dir=${1:-.};
  find ${dir} \( -type d -name .git \) -prune -false -o -exec chown $USER {} \;
}

#----------------------------------------
# Function to list all files in a directory, minus the hidden svn/git ones
L () {
  local dir=${1:-.};
  find ${dir} -type d \( -name .svn -o -name .git \) -prune -false -o -type f
}

#----------------------------------------
# Function to show how a command will be executed
how () {
  if [ $# -ne 0 ] ; then
    more `type -P $1`
  fi
}

#------------------------------------------------------------------------------
# Subversion functions
#------------------------------------------------------------------------------
export SVN_EDITOR=vim
#----------------------------------------
# Function that takes a local directory path or file and returns the
# URL to that dir/file
# Usage: repo_path [local_dir_or_file]
#        default local_dir_or_file is current dir (the ./ dir)
repo_path () {
  local path=${1:-.}
  local wc_path="$path"
  if [ -d $path ] ; then
    path=""                       # path arg is a dir, so set filename to blank
  else
    # if the path arg is a file, strip off the path part and the file part
    wc_path=`dirname $path`       # get path part
    path=`basename $path`         # get filename
  fi
  wc_path=`cd $wc_path 1>/dev/null && pwd`  # get absolute path
  #wc_path=`cygpath -m $wc_path/$path`       # svn needs DOS-style path, but with forward slashes (mixed mode)
  svn info $wc_path | grep "^URL:" | cut -f2 -d\  2>&1
}
alias rp=repo_path

#----------------------------------------
# Function that takes a local directory path or file and returns the subversion
# subversion commit log for that dir/file.
# Usage: svnlog [-v] [local_dir_or_file]
#        -v provides verbose output (i.e., list of files committed)
#        default local_dir_or_file is current dir (the ./ dir)
svnlog () {
  local opt=""
  local path=${1:-.}
  if [ "$path" = "-v" ] ; then
    opt="-v"
    path="${2:-.}"
  fi
  svn log ${opt} `repo_path ${path}`
}
alias log="svnlog"
alias LOG="svnlog -v"

#----------------------------------------
# Function that lists the svn directories or files using the repository instead
# of the working copy. This is useful if there are differences between your
# working copy and the repository - you don't have to 'svn up' to see them.
# Usage: svnls [local_dir_or_file]
#        default local_dir_or_file is current dir (the ./ dir)
svnls () {
  local opt=""
  local path=${1:-.}
  if [ "$path" = "-v" ] ; then
    opt="-v"
    path="${2:-.}"
  fi
  svn ls ${opt} `repo_path ${path}`
}
alias sls="svnls"
alias sll="svnls -v"

#----------------------------------------
# Function to facilitate modifying/editing the svn log entry of a
# specific commit.
# Usage: modlog revision [local_dir_or_file]
#        default local_dir_or_file is current dir (the ./ dir)
modlog () {
  local rev=${1:-0}
  local files=${2:-.}
  if [ $# -eq 0 ] ; then
    echo "Modify previously committed log message"
    echo "Usage: modlog rev_number [file/dir]"
  else
    svn propedit -r ${rev} --revprop svn:log ${file}
  fi
}

#----------------------------------------
# Function that lists any svn files that have been modified, added, or deleted.
# Usage: mod [local_dir_or_file]
#        default local_dir_or_file is current dir (the ./ dir)
mod () {
  local dirs=${1:-0}
  svn st ${dirs} | grep -E "^[MAD]"
}

#------------------------------------------------------------------------------
# git functions
#------------------------------------------------------------------------------
git_rev() {
  local d=`date +%Y%m%d`
  local c=`git rev-list --count HEAD | xargs -n1 printf %04d`
  local h=`git rev-list --abbrev-commit HEAD | head -1`
  echo ${c}:${h}:${d}
}

# Aliases for git
alias add="git add"
alias dff="git df"
alias st="git st"

#------------------------------------------------------------------------------
# setup python env
#------------------------------------------------------------------------------
#export PATH="/Users/mbianchi/.pyenv/shims:${PATH}"
#export PYENV_SHELL=bash
#source '/usr/local/Cellar/pyenv/20151105/libexec/../completions/pyenv.bash'
#pyenv rehash 2>/dev/null
#pyenv() {
#  local command
#  command="$1"
#  if [ "$#" -gt 0 ]; then
#    shift
#  fi
#
#  case "$command" in
#  rehash|shell)
#    eval "`pyenv "sh-$command" "$@"`";;
#  *)
#    command pyenv "$command" "$@";;
#  esac
#}

