""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  Plugins!
"  managed with vim-plug
"  https://github.com/junegunn/vim-plug
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')

" --- make vim look pretty ---
Plug 'crusoexia/vim-monokai'
Plug 'crusoexia/vim-dracula'
Plug 'tomasr/molokai'
Plug 'altercation/vim-colors-solarized'
Plug 'bling/vim-airline'
Plug 'bling/vim-bufferline'
Plug 'junegunn/goyo.vim'

" -- vim as a project/program's text editor ---
Plug 'amiorin/vim-project'
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'scrooloose/syntastic'
Plug 'sheerun/vim-polyglot'
Plug 'majutsushi/tagbar'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'                 "fixes the . cmd when using a surround
"Plug 'jiangmiao/auto-pairs'
Plug 'tomtom/tcomment_vim'
Plug 'garbas/vim-snipmate'
Plug 'MarcWeber/vim-addon-mw-utils'     "required for vim-snipmate
Plug 'tomtom/tlib_vim'                  "required for vim-snipmate
Plug 'ntpeters/vim-better-whitespace'
Plug 'ervandew/supertab'
Plug 'junegunn/vim-easy-align',     { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] }

" --- file, fuzzy searching ---
Plug 'Shougo/vimproc.vim'               "needed by unite.vim
Plug 'Shougo/unite.vim'                 "you have to go to .vim/plugged/vimproc.vim and do a ./make
"Plug 'ctrlpvim/ctrlp.vim'
Plug 'rking/ag.vim'
Plug 'vim-scripts/a.vim'
"Plug 'derekwyatt/vim-fswitch'          "upgrade to a.vim

" --- utilities ---
Plug 'jez/vim-superman'                 "man pages insitu
"Plug 'junegunn/vim-peekaboo'            "show register contents

call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin-Specific Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" ----- altercation/vim-colors-solarized settings -----
" Uncomment the next line if your terminal is not configured for solarized
"let g:solarized_termcolors=256

" ----- bling/vim-airline settings -----
" Always show statusbar
set laststatus=2
" Uncomment below if using patched fonts
let g:airline_powerline_fonts = 1
" Show PASTE if in paste mode
let g:airline_detect_paste = 1
" Show airline for tabs too
let g:airline#extensions#tabline#enabled = 1

" ----- bling/vim-bufferline -----
let g:bufferline_echo = 0

" ----- jistr/vim-nerdtree-tabs -----
" Open/close NERDTree Tabs with \t
nmap <silent> <leader>t :NERDTreeTabsToggle<cr>
" To have NERDTree always open on startup
let g:nerdtree_tabs_open_on_console_startup = 0

" ----- scrooloose/syntastic settings -----
let g:syntastic_error_symbol = '✘'
let g:syntastic_warning_symbol = "▲"
augroup mySyntastic
  au!
  au FileType tex let b:syntastic_mode = "passive"
  au FileType cpp let b:syntastic_mode = "passive"
augroup END
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
nnoremap <leader>S :SyntasticToggleMode<CR>

" ----- majutsushi/tagbar settings -----
"  Open/close tagbar with \b
nmap <silent> <leader>b :TagbarToggle<cr>
" Uncomment to open tagbar automatically whenever possible
"autocmd BufEnter * nested :call tagbar#autoopen(0)
" Treat .ts in Vim as .ts in ctags
"let g:tagbar_type_typescript = {
"  \ 'ctagstype': 'typescript',
"  \ 'kinds': [
"    \ 'c:classes',
"    \ 'n:modules',
"    \ 'f:functions',
"    \ 'v:variables',
"    \ 'v:varlambdas',
"    \ 'm:members',
"    \ 'i:interfaces',
"    \ 'e:enums',
"  \ ]
"\ }
" Treat .ts in Vim as .js in ctags
let g:tagbar_type_typescript = {
  \ 'ctagstype': 'JavaScript',
  \ 'kinds': [
    \ 'f:functions',
    \ 'c:classes',
    \ 'm:members',
    \ 'p:properties',
    \ 'v:globals',
  \ ]
\ }

" ----- amiorin/vim-project -----
"let g:proj_flags = 'imstvcg'

" ----- jiangmiao/auto-pairs settings -----
" uncomment to enable Fly Mode
let g:AutoPairsFlyMode = 1

" ----- ntpeters/vim-better-whitespace settings -----
nmap <silent> <leader>W :StripWhitespace<CR>
nmap <silent> <leader>w :ToggleWhitespace<CR>

" ----- junegunn/vim-easy-align -----
" Easy alighn interactive
vnoremap <silent> <Enter> :EasyAlign<cr>
" Start interactive EasyAlign in a visual mode (e.g., vipga)
"xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g., gaip)
"nmap ga <Plug>(EasyAlign)

" ----- Shougo/unite.vim settings -----
let g:unite_source_history_yank_enable = 1
try
  let g:unite_source_rec_async_command = 'ag --nocolor --nogroup -g ""'
  call unite#filters#matcher_default#use(['matcher_fuzzy'])
catch
endtry
" Search a file in the filetree
"nnoremap <space><space> :split<cr> :<C-u>Unite -start-insert file_rec/async<cr>
"nnoremap <space>f :split<cr> :<C-u>Unite file<cr>
"nnoremap <space>g :split<cr> :<C-u>Unite -start-insert file_rec/git<cr>
" see the yank history
" nnoremap <space>y :split<cr>:<C-u>Unite history/yank<cr>
" " reset not it is <C-l> normally
" :nnoremap <space>r <Plug>(unite_restart)

" ----- rking/ag.vim settings -----
" Type & to search the word in all files in the current dir
nmap & :Ag <c-r>=expand("<cword>")<cr><cr>
"nnoremap <space>/ :Ag

" ----- jez/vim-superman settings -----
noremap K :SuperMan <cword><cr>

" ----- junegunn/vim-peekaboo -----
" Default peekaboo window
" let g:peekaboo_window = 'vertical botright 30new'
" " Delay opening of peekaboo window (in ms. default: 0)
" let g:peekaboo_delay = 750
" " Compact display; do not display the names of the register groups
" let g:peekaboo_compact = 1

"vim:ft=vim ts=2 sw=2 tw=2
