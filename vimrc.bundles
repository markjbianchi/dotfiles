""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  Plugins!
"  managed with vim-plug
"  https://github.com/junegunn/vim-plug
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')

" --- make vim look pretty ---
Plug 'crusoexia/vim-monokai'
Plug 'crusoexia/vim-dracula'
Plug 'tomasr/molokai'
Plug 'altercation/vim-colors-solarized'
Plug 'nanotech/jellybeans.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'junegunn/goyo.vim'

" -- vim IDE GUI and such ---
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'majutsushi/tagbar'
Plug 'xolox/vim-session'
Plug 'xolox/vim-misc'                   "required by vim-session
Plug 'bufexplorer.zip'

" -- vim as a project/program's text editor ---
"Plug 'scrooloose/syntastic'
"Plug 'sheerun/vim-polyglot'
"Plug 'tomtom/tcomment_vim'
"Plug 'tpope/vim-surround'
"Plug 'tpope/vim-repeat'                 "fixes the . cmd when using a surround
"Plug 'garbas/vim-snipmate'
"Plug 'MarcWeber/vim-addon-mw-utils'     "required for vim-snipmate
"Plug 'tomtom/tlib_vim'                  "required for vim-snipmate
Plug 'ntpeters/vim-better-whitespace'
Plug 'junegunn/vim-easy-align',
"Plug 'valloric/youcompleteme'
"Plug 'easymotion/vim-easymotion'
"Plug 'terryma/vim-multiple-cursors'
"Plug 'jiangmiao/auto-pairs'

" --- file, fuzzy searching ---
"Plug 'ctrlpvim/ctrlp.vim'
"Plug 'Shougo/vimproc.vim'               "needed by unite.vim
"Plug 'Shougo/unite.vim'                 "you have to go to .vim/plugged/vimproc.vim and do a ./make
Plug 'rking/ag.vim'
Plug 'vim-scripts/a.vim'
"Plug 'derekwyatt/vim-fswitch'          "upgrade to a.vim

" --- utilities ---
Plug 'tpope/vim-fugitive'
Plug 'junegunn/vim-peekaboo'            "show register contents

call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin-Specific Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ----- vim-airline/vim-airline settings -----
set noshowmode          " don't show the mode since airline shows it
" Uncomment below if using patched fonts
let g:airline_powerline_fonts = 1
" Automatically show all buffers when only one tab open
let g:airline#extensions#tabline#enabled = 1
let g:airline#extentions#tabline#fnamemod = ':t'
" Disable bufferline integration
let g:airline#extentions#bufferline#enabled = 0
let g:airline#extensions#whitespace#enabled = 1

" ----- junegunn/goyo.vim -----
nnoremap <LEADER>G :Goyo<CR>

" ----- jistr/vim-nerdtree-tabs -----
let g:nerdtree_tabs_open_on_gui_startup = 0
let g:nerdtree_tabs_open_on_console_startup = 0
let NERDTreeChDirMode = 0
let NERDTreeHighlightCursorline = 1
let NERDTreeIgnore = ['\~$', '*.pyc$', '*\.pdf$' ]
nnoremap <F2> :NERDTreeMirrorToggle<CR>
inoremap <F2> <ESC>:TagbarToggle<CR>

" ----- xolox/vim-session -----
let g:session_autosave = 'yes'
let g:session_autoload = 'no'
let g:session_default_to_last = 1
" Don't save/restore help windows in sessions
set sessionoptions-=help
" Don't save/restore hidden and unloaded buffers in sessions
set sessionoptions-=buffers

" ----- bufexplorer -----
nnoremap <LEADER>\ :BufExplorer<CR>

" ----- scrooloose/syntastic settings -----
let g:syntastic_error_symbol = '✘'
let g:syntastic_warning_symbol = "▲"
augroup mySyntastic
  au!
  au FileType cpp let b:syntastic_mode = "passive"
  au FileType c   let b:syntastic_mode = "passive"
augroup END
""set statusline+=%#warningmsg#
""set statusline+=%{SyntasticStatuslineFlag()}
""set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

""nnoremap <LEADER>S :SyntasticToggleMode<CR>
""nnoremap <LEADER>C :SyntasticCheck<CR>

" ----- majutsushi/tagbar settings -----
" Uncomment to open tagbar automatically whenever possible
"autocmd BufEnter * nested :call tagbar#autoopen(0)
" Treat .ts in Vim as .js in ctags
let g:tagbar_type_typescript = {
  \ 'ctagstype': 'JavaScript',
  \ 'kinds': [
    \ 'f:functions',
    \ 'c:classes',
    \ 'm:members',
    \ 'p:properties',
    \ 'v:globals',
  \ ]
\ }
nnoremap <F3> :TagbarToggle<CR>
inoremap <F3> <ESC>:TagbarToggle<CR>

" ----- ntpeters/vim-better-whitespace settings -----
nnoremap <LEADER>W :StripWhitespace<CR>
nnoremap <LEADER>w :ToggleWhitespace<CR>

" ----- junegunn/vim-easy-align -----
" Easy align interactive
vnoremap <ENTER> :EasyAlign<CR>
" Start interactive EasyAlign in a visual mode (e.g., vipga)
"xnoremap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g., gaip)
"noremap ga <Plug>(EasyAlign)

" ----- 'valloric/youcompleteme' -----
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_add_preview_to_completeopt = 0

" ----- ctrlpvim/ctrlp.vim settings -----
" Setup some default ignores
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
\}
" Use the nearest .git directory as the cwd
let g:ctrlp_working_path_mode = 'r'
" Easy bindings for its various modes
""nnoremap <LEADER>bb :CtrlPBuffer<CR>
""nnoremap <LEADER>bm :CtrlPMixed<CR>
""nnoremap <LEADER>bu :CtrlPMRU<CR>

" ----- Shougo/unite.vim settings -----
let g:unite_source_history_yank_enable = 1
try
  let g:unite_source_rec_async_command = 'ag --nocolor --nogroup -g ""'
  call unite#filters#matcher_default#use(['matcher_fuzzy'])
catch
endtry

" ----- rking/ag.vim settings -----
" Type & to search the word in all files in the current dir
nnoremap & :Ag <C-R>=expand("<CWORD>")<CR><CR>

" ----- Ack          settings -----
nnoremap <LEADER>k :Ack!<SPACE>
let g:ackprg = 'ag --smart-case --nogroup --nocolor --column'

" Ack motions
" Motions to Ack for things. Works with pretty much everything, including:
"   w, W, e, E, b, B, t*, f*, i*, a*, and custom text objects
" Note: If the text covered by a motion contains a newline it won't work.
" Ack searches line-by-line.
"nnoremap <LEADER>K :set opfunc=<SID>AckMotion<CR>g@
"" xnoremap <silent> <leader>K :<C-U>call <SID>AckMotion(visualmode())<CR>

"nnoremap <LEADER>K :Ack! '\b<C-R><C-W>\b'<CR>
"nnoremap <BS> :Ack! '\b<C-R><C-W>\b'<CR>
"xnoremap <SILENT> <BS> :<C-U>call <SID>AckMotion(visualmode())<CR>

function! s:CopyMotionForType(type)
  if a:type ==# 'v'
    silent execute "normal! `<" . a:type . "`>y"
  elseif a:type ==# 'char'
    silent execute "normal! `[v`]y"
  endif
endfunction

function! s:AckMotion(type) abort
  let reg_save = @@
  call s:CopyMotionForType(a:type)
  execute "normal! :Ack! --literal " . shellescape(@@) . "\<cr>"
  let @@ = reg_save
endfunction

" ----- vim-scripts/a.vim settings -----
nnoremap <LEADER>a :A<CR>

" ----- tpope/vim-fugitive -----
" Hack to delete fugitive buffers when we leave them - otherwise
" the buffer list gets polluted
autocmd BufReadPost fugitive://* set bufhidden=delete
" Mapping on .. to view parent tree
autocmd BufReadPost fugitive://*
  \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
  \   nnoremap <BUFFER> .. :edit %:h<CR> |
  \ endif

" ----- junegunn/vim-peekaboo -----
" Default peekaboo window
let g:peekaboo_window = 'vertical botright 30new'
" " Delay opening of peekaboo window (in ms. default: 0)
let g:peekaboo_delay = 750
" " Compact display; do not display the names of the register groups
let g:peekaboo_compact = 1

"vim:ft=vim ts=2 sw=2 tw=2
