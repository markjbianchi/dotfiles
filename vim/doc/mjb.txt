*mjb.txt*        Mark Bianchi's customizations, tips, and tricks

1. Custom Mappings                              |custom-mappings|
2. Plugin Mappings                              |plugin-mappings|
3. Window Mappings                              |window-mappings|
4. Handy Vim Commands                           |handy-vim-commands|
5. Helpful Vim Resources                        |vim-help-files|

==============================================================================
                                                *custom-mappings*
1. Custom Mappings~

Wherever it makes sense, I try to stick to the original Vim commands.  These
are the cases where I have found it easier to create my own mapping.

    * Getting help
      \<F1>     -- load this help file
      <M-F1>    -- show help topic for word under cursor |{subject}|

    * Vim searching:
      \<space>  -- toggle search highlighting |hlsearch|
      <C-L>     -- turn off hilight search and repaint screen |nohls|
      n N 	-- search forward keeping results in middle of window

    * Display control:
      \X	-- turn on syntax highlighting |syntax|
      \N	-- toggle non-printable (tab, \n, etc) chars

    * Editing shortcuts:
      <Tab>     -- indent 1 level (visual mode) |>|
      <S-Tab>   -- outdent 1 level (visual mode) |<|
      go	-- open line below w/o entering insert mode (normal mode)
      gO	-- open line above w/o entering insert mode (normal mode)
      \,	-- split comma-delimited list into new lines
      \-	-- underline word with -
      \=	-- underline word with =
      \'	-- surround word with '
      \"	-- surround word with "

    * Miscellaneous
      \<Tab>    -- apply current tab settings to file |:retab|
      <C-K>     -- ex command recall, <C-J>, <C-K to scroll dwn/up |cmdline-history|
      vy	-- select entire buffer
      gV	-- go to last inserted text
      gs	-- update (save) current buffer
      <C-Tab>	-- cycle forward  to next buffer
      <C-S-Tab>	-- cycle backward to next buffer
      <F5>	-- list buffers and prompt for selection
      <F6>	-- toggle line wrap mode
      \rc	-- source vimrc file
      w!!	-- sudo (over)write of file

    * Navigating & using tag files:
      <M-]>     -- go to tag location under cursor |CTRL-]|
      <M-[>     -- return to previous tag location |CTRL-T|
      <M-\>     -- got to tag under cursor in preview window |:ptag|

==============================================================================
                                                *plugin-mappings*
2. Plugin Mappings~

These mappings are specific to and dependent on the installation of
particular plugins (which are primarily installed via the vim-plug
plugin manager http://github.com/junegunn/vim-plugin)

    * BufExplorer:
      \\	-- open buffer list in current window
      \bs	-- open buffer list in new horizontal split window
      \bv	-- open buffer list in new vertical   split window

    * A.vim:
      \a	-- toggles companion files (.c <-> .h)

    * Goyo:
      \G	-- for distraction-free writing

    * Better-WS:
      \w	-- toggle on/off trailing whitespace
      \W	-- remove trailing whitespace

    * NERDtree pannel and Tagbar panel:
      <F2>	-- NERDtree panel toggle
      <F3>	-- Tagbar panel toggle

    * Vim-Sessions:
      :OpenSession	  -- presents list of sessions to open
      :CloseSession	  -- closes current session, empty buffer in window
      :SaveSession [name] -- saves session to name (default if blank)

    * Easy-Align:
      <Enter>	-- interactive, highlight in visual mode, then hit
		   <Enter> then column number, then <space>
    * Peekaboo:
      "{delay}	-- opens right vert window showing register contents
      @{delay}	-- opens right vert window showing macro reg contents

==============================================================================
                                                *window-mappings*
3. Window Mappings~

These mappings facilitate dealing with Vim |window| control, movement
between windows, etc.

      \hs	-- horizontal split window with current buffer |:split|
      \vs	-- vertical   split window with current buffer |:vsplit|
      \sc	-- close current window |:close|
      gh	-- left  move between windows |:wincmd|
      gl	-- right move between windows |:wincmd|
      gk	-- up    move between windows |:wincmd|
      gj	-- down  move between windows |:wincmd|
      gp	-- go to prev      window |:wincmd|
      gt	-- go to top left  window |:wincmd|
      gb	-- go to bot right window |:wincmd|
      gw	-- cycle through windows (clockwise) |:wincmd|
      <M-J>     -- move down and maximize window
      <M-K>     -- move up and maximize window
      g=        -- make all windows equal size
      gx        -- swap windows
      +         -- increase window height
      -         -- decrease window height

==============================================================================
                                                *handy-vim-commands*
4. Handy Vim Commands (Built In)~

    * Screen navigation
      <C-E>     -- scroll up   one line |CTRL-E|
      <C-Y>     -- scroll down one line |CTRL-Y|
      <C-U>     -- scroll up   half screen |CTRL_U|
      <C-D>     -- scroll down half screen |CTRL-D|
      <C-F>     -- scroll up   full screen |CTRL_F|
      <C-B>     -- scroll down full screen |CTRL-B|
      |M|	-- jump to middle of screen
      |zz|	-- puts line w/ cursor in middle of window
      |zt|	-- puts line w/ cursor at top of window
      |zb|	-- puts line w/ cursor at top of window

    * Navigation and searching
      H  L	-- puts cursor at beginning / end of line
      |gg|	-- jump to first line in buffer
      |G|	-- jump to last line in buffer
      m{name}   -- set mark using a single character name |mark|
      '{name}   -- jump to mark with given character name |'|
      *		-- find next forward  occurrence of word |star|
      #		-- find next backward occurrence of word |star|
      f{name}	-- find (move cursor to) next occurance of single char |f|
      F{name}	-- find (move cursor to) prev occurance of single char |F|
      t{name}	-- find the char before next occurance of char name |t|
      T{name}	-- find the char after  prev occurance of char name |T|
      /fred\|joe   search for fred OR joe

    * Programming stuff:
      |[[|	-- jump to top of current function
      |]]|	-- jump to top of next function
      |%|	-- find matching brace or paren
      |=|	-- smart indent visual block (|==| indent line)
      |gf|	-- open file under cursor
      |gq|	-- format motion or visual block
      |ga|	-- display dec,hex,octal value of ascii character under cursor
      <C-A>	-- increment number under cursor |CTRL_A|
      <C-X>	-- decrement number under cursor |CTRL_X|

    * Macros
      q<name>   -- create macro (end with q) |q|
      @<name>   -- run macro (@@ repeats last macro) |@|

    * Cursor history
      <C-O>     -- jump to previous location in history |CTRL-O|
      <C-I>     -- jump to next location in history |CTRL-I|
      |'.|	-- jump to last modification line
      |`.|	-- jump to exact spot in last modification line

    * Registers (Multiple Cut/Copy/Paste) |registers|
      :reg      -- list all register contents |:reg|
      "xyy      -- yank lines [into register x] |yy| |quote|
      "Xyy      -- append lines into register x |yy| |quote|
      "xp       -- put the text [from register x] after the cursor |P|

    * Miscellaneous
      |guu|	-- make entire line lowercase
      |gUU|	-- make entire line uppercase

    * Ex commands
      :map      -- shows all the key mappings |:map|
      :he index -- shows all the default key mappings |index|
      :verbose map
      :set {option}?  shows what param is set to |:set|
      :ls	-- list buffers |:buffers| |:ls|
      :cd ..	-- move to parent directory
      :h xyz<tab>     type <tab> for list of help topics containing xyz
      :Ex	-- file explorer (netrw) |:Explore|
      :his	-- list of all your commands |:history|

==============================================================================
                                                *vim-help-files*
5. Helpful Vim Resources~

These are resources in the Vim online help documentation.

    * Searching
        Search commands               |search-commands|
        Pattern definiton             |search-pattern|
        Specifying multiple patterns  |pattern-multi-items|
        Atoms and character ranges    |pattern-atoms|
        File and folder searching     |file-searching|

    * Miscellaneouse
        Keyword completion            |'complete'|
        Using registers               |registers|
        Using diff & patch            |vimdiff|

    * Command Line
        Special expansion characters  |cmdline-special|

==============================================================================
vim:textwidth=78:tabstop=8:noexpandtab:filetype=help
